---
title: "Steps to reproduce the TFBS analysis"
author: "Maria Osmala"
date: today
format:
  html:
    toc: true
    toc-depth: 3  # Optional: Set depth of ToC levels
    toc-location: left  # Optional: Adjust placement (left, right, float)
---

# Steps to reproduce the TFBS analysis

First edit `Experiments/config.yaml` to specify the folders in which to place the data. NOTE: currently many paths are hard-coded in the scripts.

The steps are also are described in `/code/motif_analysis_workflow.R`.

## Create SELEX motif collection

Reads motifs and associated metadata from Excel files. Writes motifs in different forms. Draws logos. Computes additional metadata.

Motifs will be here: `TFBS/Data/PWMs/`

Also processes artificial halfsites for TFs for which the monomeric motif is homodimer. Note that these are not included to the final SELEX collection as they are not real motifs. These are used in ... TODO: need to recognise homodimers and extract the artificial halfsite motifs automatically also for other TFs.

```{r}
source("code/SELEX-motif-collection/run.R")
```

![Taipale lab SELEX motif collection](../images/Selex-motif-collection.png){fig-align="center"}

### Draw different types of motif logos

```{r}
TFBS/RProjects/TFBS/code/motifs_logos_better.R
TFBS/RProjects/TFBS/code/motif_logos_better_version2.2.R
```
Spacek, normal and bar logos. 
```{bash}
~/spacek/Experiments/draw_logos.sh
```

## Create scrambled control motifs (aka. artificial motifs)

```{r}

# Generate artificial motifs
code/SELEX-scrambled-control-motifs/generate_artificial_motifs.R
code/SELEX-scrambled-control-motifs/generate_artificial_motifs_artificialHTSELEX_halfsites.R
code/SELEX-scrambled-control-motifs/artificial_motif_functions.R

```

## Compute motif similarities

### MOSTA-SSTAT

Install [MOSTA-SSTAT](https://github.com/MariaOsmala/MOSTA-SSTAT)

The number of motifs is 3933. There are thus 3933\*(3933-1)/2=7732278 pairwise similarities. We will compute the similarities in 1000 batches of size 7730. We also need to compute the 3933 similarities of each motif with itself.

These steps require the transfac -format of the motifs

The scripts have been run on cluster. Uses local scratch to save intermediate results. Change the paths according to your system!

```{bash}
sbatch Experiments/MOSTA-SSTAT/run_SSTAT_batch_array.sh
sbatch Experiments/MOSTA-SSTAT/run_SSTAT_similarity_with_itself.sh

```

Collect and process SSTAT similarity scores. The output is compatible with the dominating set analysis.

```{r}
code/motif-similarity/extract_SSTAT.R
```

### TOMTOM

Create conda environment with `meme.yml`. The code uses meme version 5.4.1

see [sessionInfo](sessionInfos/meme_sessionInfo.txt)

First convert motifs to meme format. True motifs and artificial half-sites.

```{bash}
bash code/run_scpd2meme.sh

```

The command for tomtom is `tomtom -dist kullback -motif-pseudo 0.1 -thresh 1 -min-overlap 1 $meme_file $meme_file -oc $results_path`

```{bash}
sbatch Experiments/tomtom/tomtom_all_true_motifs.sh
sbatch Experiments/tomtom/tomtom_artificialHTSelex_against_true.sh
```

### Gapped 10-mer similarity

Install [motifsimilarity](https://github.com/jutaipal/motifsimilarity). Can be compiled to use a single core or multiple cores.

```{bash}
#for parallel, compile (mac):
clang -latomic -fopenmp -lm -O3 -o motifsimilarity-parallel motifsimilarity.c
#for one core
clang -lm -O3 -o motifsimilarity-onecore motifsimilarity.c

#or for parallel (linux):
gcc -fopenmp -o motifsimilarity_openmp motifsimilarity.c -lm -latomic
#for one core:
gcc -o motifsimilarity motifsimilarity.c -lm

```

Usage:

PWM motifs a.pfm and b.pfm must be formatted using tab separated columns with four rows in alphabetical order (A, C, G, T)

```{bash}
./motifsimilarity a.pfm b.pfm gapped 10
```

Experiments:

Computes the similarities in 1000 batches of size 7730. No need to compute similarities of each motif with itself as it is always 1.

Parallel, uses 4 cpus.

```{bash}
sbatch Experiments/motifsimilarity/run_motifsimilarity_sbatch_array.sh

#runs this: run_motifsimilarity_final_version2.2.sh

```

Compute 10-mer gapped similarities for artificial half-sites against true motifs? Are these computed? Not needed?

```{bash}


```

Compute 10-mer gapped similarities between true/real motif and the corresponding scrambled control motifs. We will remove those scrambled motifs from the analysis if they are similar (> 0.1 similarity) to the true motif. TODO: Remove also control motifs if they are similar to any true/real motif. Process 10 true motifs at a time

```{bash}
Experiments/motifsimilarity/run_motifsimilarity_true_vs_corresponding_artificial_sbatch_array.sh
Experiments/motifsimilarity/run_motifsimilarity_true_vs_corresponding_artificial.sh
```


TODO: Remove also control motifs if they are similar to any true/real motif. Find gapped 10-mer similarity threshold for DSA

### Other similarity measures

MosBat, Kolmogorov-Smirnov statistics of motif matches.


## Minimum Dominating Set analysis

Computations done on mac. The code uses perl 5.34.1 and GLPSOL--GLPK LP/MIP Solver 5.0. The code uses SSTAT similarities.

```{bash}
perl -v 
#This is perl 5, version 34, subversion 1 (v5.34.1) built for darwin-thread-multi-2level
glpsol -v    
#GLPSOL--GLPK LP/MIP Solver 5.0
```

```{bash}

Experiments/SELEX-Dominating-Set-Analysis/run_domset_example.sh
```

Process the results to add representativeness info to motif metadata (new_representative; YES or NO). Form motif clusters aka motifs represented by representatives.

The minimum dominating analysis was performed for all 3933 motifs and the new 1131 composites.

```{r}
code/SELEX-Dominating-Set-Analysis/process_DSA_results.R
code/SELEX-Dominating-Set-Analysis/process_DSA_results_new_composites.R
code/SELEX-Dominating-Set-Analysis/motifs_represented_by_representatives.R
code/SELEX-Dominating-Set-Analysis/motifs_represented_by_representatives_new_composites.R

```
## Circular plot of motif clusters

## Jeff Viersta style webpage of motif clusters

## Cytoscape visualisation of the motif network


## Human genome sequence and annotations

Download human genome hg38 from here: `https://hgdownload.cse.ucsc.edu/goldenPath/hg38/bigZips/`


```{bash}
Experiments/Genome-and-annotations/download_genome.sh
```

Results in the genome which is used for motif matching: `Genomes/hg38/chr_sequences.fa`
Size: 3,150,035,398 ~3.15 GB or 3,139,741,166 (on Puhti)?

TODO: Alternative genomes, mouse genome, think more carefully the repeast masking
```{bash}
Experiments/Genome-and-annotations/download_genome_T2T.sh
Experiments/Genome-and-annotations/download_genome_analysisSet.sh

```

This code extracts the genome annotations as a gtf file. How this is used?
```{r}
"Experiments/Genome-and-annotations/extract_genome_annotations.R"
```

Gencode annotations (used for conservation analysis)

Repeats (used for conservation analysis)


## Motif matching

Create conda environment with `MOODS.yml`. The code uses python v2.7.15 and moods v1.9.4.1 see [sessionInfo](sessionInfos/MOODS_sessionInfo.txt)

The command to run moods is `moods-dna.py -m ${pwms[@]:$start_ind:$length} --threshold 2 -s $genome`. Here

-   pwms contain paths to the space-delimited pfms

-   we run moods to 10 pfms at a time

-   default parameters are used for background distributions (uniform) and pseudocount (0.01).

-   Minimum motif match/binding affinity score is 2 (natural logarithm). This produces an excess number of motif matches.

-   the output is written to `csv.gz` files

Match 3933 true/real/original motifs to the human genome. Match also the artificial half-sites.
Change the paths accordingly!

TODO: create artificial-half-site-motifs/motifnames.csv

```{bash}
sbatch Experiments/MOODS/run_MOODS_batch_array_better.sh
#This runs either of these:
#Experiments/MOODS/MOODS_final_version2.2_correct.sh
#Experiments/MOODS/MOODS_final_artificialHTSelex.sh

```

Match artificial motifs to the genome. Here

- we match the artificial motifs of 5 true motifs at a time

```{bash}
sbatch Experiments/MOODS/run_MOODS_artificial_motifs.sh
#This runs either of these: 
#Experiments/MOODS/MOODS_artificial_motifs.sh
#Experiments/MOODS/MOODS_artificial_motifs_artificialHTSELEX_halfsites.sh
```

### Process MOODS results

Sort the motive matches by score from highest to lowest, select the score of the 300 000th match, and select all matches with at least this score. 

The codes uses R environment 4.2.1 on CSC Puhti. 

Creates GRanges objects (.Rds files) and bed files of motif matches.
```{bash}
sbatch /projappl/project_2006203/TFBS/Experiments/run_process_MOODS.sh
```
Runs the following. See [sessionInfo](sessionInfos/sessionInfo_MOODS_results_to_database.txt)

```{r}
#To process true motif matches
code/MOODS/MOODS_results_to_database.R 

#To process artificial half-site motif matches

code/MOODS/MOODS_artificialHTSelex_results_to_database.R 

#To process scrambled motif matches
code/MOODS/MOODS_artificial_results_to_database.R 

#To process scrambled artificial half-site motif matches
code/MOODS/MOODS_artificial_artificialHTSelex_results_to_database.R 

```

Moods results to a single GRangesList
```{bash}
/projappl/project_2006203/TFBS/ATAC-seq-peaks/Experiments/MOODS_results_to_single_GRangesList.sh
```

Runs this code (R-4.2.1), same sessionInfo as above. 
```{r}
code/MOODS/MOODS_results_to_single_GRangesList.R 
```

Match numbers and MOODS threshold to obtain the match numbers, add to the metadata

Extract also the mean PhyloP thresholds for the conservation analysis (need to be computed first)

This uses R environment 4.3.0 on CSC Puhti. SessionInfo?

```{bash}
sbatch Experiments/MOODS/process_and_analyse_top_MOODS_hits.sh
#runs the following
#code/MOODS/process_and_analyse_top_MOODS_hits.R
```

## Motif match enrichment at cell-type-specific candidate cis-regulatory elements (cCREs)

Cell-type-specific cCREs obtained from Zhang et al. 2021. Data can be downloaded [here](https://data.mendeley.com/datasets/yv4fzv6cnm/)

TODO: Analyse also fetal cCREs and differential cCREs between adult and fetus. CRE modules?

### Extract coordinates of cCREs, cell-type groups, and better cell type names
Extract coordinates from Zhang et al. 2021 data. I have used the bed-files in yv4fzv6cnm-4/Zhang et al Figure 2/2E_Cell_type_restricted_peaks/. There is a .bed file for each of the 111 adult cell-types. For more info and more descriptive names of the cell types and cell type groupings, see [this table](Data/Zhang2021/Adult_Celltypes_mapping.csv) and an R-script `cell_type_names.R`.

```{bash}
mkdir Experiments/motif-match-enrichment-at-cell-type-specific-cCREs
mkdir Experiments/predict-cell-type-specificity-of-cCREs-from-motif-matches

Experiments/motif-match-enrichment-at-cell-type-specific-cCREs/download.sh
code/Experiments/motif-match-enrichment-at-cell-type-specific-cCREs/sets_of_accessible_regions.R
code/Experiments/motif-match-enrichment-at-cell-type-specific-cCREs/cell_type_names.R
```

### Motif enrichment at cCREs

Uses R-4.3.0. [sessionInfo](sessionInfos/sessionInfo_enrichment_at_CREs.txt)

To investigate whether the motif matches are enriched or depleted at the cell-type-specific cCREs, we applied the Fisher’s Exact Test. We computed the p-value to evaluate the deviation from the null hypothesis that the presence of a motif match at a cCRE is independent of whether the cCRE belongs to a set of cell-type-specific cCREs. The motif match enrichment at particular cell type specific cCREs was determined as relative enrichment compared to frequency of matches of the same motif at all cell-type specific cCREs (relative frequency fold change).

Processes batches of 10 motifs. Distributed to ~3933/10 cpus. Outputs p-values and the fold change of enrichment.

```{bash}

sbatch Experiments/motif-match-enrichment-at-cell-type-specific-cCREs/analysis_CRE_enrichment_final_parts.sh

```

```{r}
code/motif-match-enrichment-at-cell-type-specific-cCREs/enrichment_at_CREs_final_all_motifs_parts.R
code/motif-match-enrichment-at-cell-type-specific-cCREs/FishersExact.R
```
Collects the results from the batches.
```{r}
code/motif-match-enrichment-at-cell-type-specific-cCREs/collect_enrichment_at_CREs_final_all_motifs_parts.R
```

Draw heatmaps of the data and count the number of enriched representative composite and spacing motifs 

sessionInfos/sessionInfo_analyse_TF_enrichment_heatmap_final.txt

Only for representative motifs
Volcano plots
Interactive heatmaps?
Other visualisations?

```{r}

/projappl/project_2006203/TFBS/ATAC-seq-peaks/code/analyse_TF_enrichment_heatmap_final.R #not well-structured code
# essential input Data/Zhang2021/Adult_Celltypes_mapping.csv
code/Experiments/motif-match-enrichment-at-cell-type-specific-cCREs/cell_type_names.R
/projappl/project_2006203/TFBS/ATAC-seq-peaks/code/heatmap_motor.R #Is this needed?

```

### Draw Figure 6d

#ComplexHeatmap_2.16.0
# Figure 6d

/projappl/project_2006203/TFBS/ATAC-seq-peaks/code/enrichment_at_CREs_final_bHLH_homeodomain.R
/projappl/project_2006203/TFBS/ATAC-seq-peaks/sessionInfos/sessionInfo_enrichment_at_CREs_final_bHLH_homeodomain.txt

#This is for the last version of the figure
/projappl/project_2006203/TFBS/ATAC-seq-peaks/code/enrichment_at_CREs_final_bHLH_homeodomain_representatives.R


################ Logistic regression analysis of motif matches at cCREs #################

# Prepare matrices, prepare this for renv/421
/projappl/project_2006203/TFBS/ATAC-seq-peaks/Experiments/matrices_for_predictive_analysis.sh
/projappl/project_2006203/TFBS/ATAC-seq-peaks/code/matrices_for_predictive_analysis.R
/projappl/project_2006203/TFBS/ATAC-seq-peaks/sessionInfos/sessionInfo_matrices_for_predictive_analysis.txt

# Logistic regression analysis

/projappl/project_2006203/TFBS/ATAC-seq-peaks/Experiments/run_predictive_analysis_logistic_regression.sh
/projappl/project_2006203/TFBS/ATAC-seq-peaks/code/predictive_analysis_logistic_regression.R
/projappl/project_2006203/TFBS/ATAC-seq-peaks/sessionInfos/sessionInfo_predictive_analysis_logistic_regression.txt

# Analyse logistic regression results
/projappl/project_2006203/TFBS/ATAC-seq-peaks/code/analyse_results_of_predictive_analysis_logistic_regression.R
/projappl/project_2006203/TFBS/ATAC-seq-peaks/Experiments/run_analyse_results_of_predictive_analysis_logistic_regression.sh
/projappl/project_2006203/TFBS/ATAC-seq-peaks/sessionInfos/sessionInfo_analysis_results_of_predictive_analysis_logistic_regression.txt

#AUC values from logistic regression analysis
/projappl/project_2006203/TFBS/ATAC-seq-peaks/code/AUC_values_predictive_analysis_logistic_regression.R

# Mark the t-test p-value for the different between means
/projappl/project_2006203/TFBS/ATAC-seq-peaks/RProject/AUCS.xlsx

# AUC boxplots 
/scratch/project_2006203/TFBS/ATAC-seq-peaks/Figures/cell_group_AUC_boxplots/

#Regression coefficient figures
/projappl/project_2006203/TFBS/ATAC-seq-peaks/code/figures_predictive_analysis_logistic_regression.R

#Produces
#/scratch/project_2006203/TFBS/ATAC-seq-peaks/Figures/cell_group_reg_coeffs/
#/scratch/project_2006203/TFBS/ATAC-seq-peaks/Figures/cell_group_reg_coeffs_new_motifs/
#/scratch/project_2006203/TFBS/ATAC-seq-peaks/reg_coeff_excels/

/projappl/project_2006203/TFBS/ATAC-seq-peaks/code/figures_predictive_analysis_logistic_regression_selected_TF_pairs.R
#generates
#/scratch/project_2006203/TFBS/ATAC-seq-peaks/Figures/cell_group_reg_coeffs_selected_motifs/

/projappl/project_2006203/TFBS/ATAC-seq-peaks/code/volcano_plots_for_selected_TF_pairs.R
#/scratch/project_2006203/TFBS/ATAC-seq-peaks/Figures/cell_group_volcanoes/

# Figure 6d
/projappl/project_2006203/TFBS/ATAC-seq-peaks/code/enrichment_at_CREs_final_family_pairs.R




